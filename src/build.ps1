properties {
	$projectName = "TypeCreator"
    $projectConfig = "Debug"
	$base_dir = resolve-path .\
	$source_dir = "$base_dir" 
    $build_dir = "$base_dir\build"
	
	$testCopyIgnorePath = "_ReSharper"
	
    $error_dir = "$base_dir" + "\errors"
	
	$nunitPath = "$base_dir\packages\NUnit.Runners.2.6.4\tools"
}

task default -depends Init, Compile

task Init {
    delete_directory $build_dir   
	create_directory $build_dir
}

task Compile -depends Init {
    msbuild /t:clean /v:q /nologo /p:Configuration=$projectConfig $source_dir\$projectName.sln
    msbuild /t:build /v:q /nologo /p:Configuration=$projectConfig $source_dir\$projectName.sln
}


Task RestorePackages {
	Exec { NuGet.exe restore $source_dir\$projectName.sln }
}


task PackTypeCreator {
	cp "$source_dir\TypeCreator\TypeCreator.nuspec" "$build_dir"
	cp "$source_dir\TypeCreator\bin\TypeCreator.*" "$build_dir"
	
	exec { nuget pack $build_dir\TypeCreator.nuspec -OutputDirectory $build_dir -Version 9.9.9-TestOnly}
}


task Test {
	foreach($path in Get-ChildItem $source_dir"\tests\" | where {$_.Attributes -eq 'Directory' -and $_.FullName.Contains("uShip") })
	{        
		foreach($child in Get-ChildItem $path.FullName | where {$_.FullName.Contains("bin")})
		{

			If($path.FullName.Contains("uShip."))
			{
				$dllPath = $path.FullName + "\bin\" + $projectConfig +"\" + $path.Name + ".dll"
				exec {& $nunitPath\nunit-console.exe $dllPath /framework=net-4.0 /nologo /nodots /xml=$build_dir\$path.name.xml}
				
			}            
		}
	}
}

task ConvertXmlToHtml {
	exec {& C:\nuget\nunit_to_html\NUnit2Report.Console.exe --todir=$build_dir --fileset=$build_dir + "\uShip.Api.IntegrationTests.name.name.xml"}
}
task CommonAssemblyInfo {
    $version = "1.0.0.0"   
    create-commonAssemblyInfo "$version" $projectName "$source_dir\CommonAssemblyInfo.cs"
}

function global:run_unit_tests($asmName){
exec {
		& $nunitPath\nunit-console.exe $asmName /nologo /nodots /xml=$build_dir\TestResult.xml    
	}
}

function global:copy_website_files($source,$destination){
    $exclude = @('*.user','*.dtd','*.tt','*.cs','*.csproj','*.orig', '*.log') 
    copy_files $source $destination $exclude
	delete_directory "$destination\obj"
}

function global:copy_files($source,$destination,$exclude=@()){    
    create_directory $destination
    Get-ChildItem $source -Recurse -Exclude $exclude | Copy-Item -Destination {Join-Path $destination $_.FullName.Substring($source.length)} 
}

function global:Copy_and_flatten ($source,$filter,$dest) {
  ls $source -filter $filter  -r | Where-Object{!$_.FullName.Contains("$testCopyIgnorePath") -and !$_.FullName.Contains("packages") }| cp -dest $dest -force
}

function global:copy_all_assemblies_for_test($destination){
  create_directory $destination
  Copy_and_flatten $source_dir *.exe $destination
  Copy_and_flatten $source_dir *.dll $destination
  Copy_and_flatten $source_dir *.config $destination
  Copy_and_flatten $source_dir *.xml $destination
  Copy_and_flatten $source_dir *.pdb $destination
  Copy_and_flatten $source_dir *.sql $destination
  Copy_and_flatten $source_dir *.xlsx $destination
}

function global:delete_file($file) {
    if($file) { remove-item $file -force -ErrorAction SilentlyContinue | out-null } 
}

function global:delete_directory($directory_name)
{
  rd $directory_name -recurse -force  -ErrorAction SilentlyContinue | out-null
}

function global:delete_files_in_dir($dir)
{
	get-childitem $dir -recurse | foreach ($_) {remove-item $_.fullname}
}

function global:create_directory($directory_name)
{
  mkdir $directory_name  -ErrorAction SilentlyContinue  | out-null
}

function global:create-commonAssemblyInfo($version,$applicationName,$filename)
{
"using System;
using System.Reflection;
using System.Runtime.InteropServices;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: ComVisibleAttribute(false)]
[assembly: AssemblyVersionAttribute(""$version"")]
[assembly: AssemblyFileVersionAttribute(""$version"")]
[assembly: AssemblyCopyrightAttribute(""Copyright 2010"")]
[assembly: AssemblyProductAttribute(""$applicationName"")]
[assembly: AssemblyCompanyAttribute(""uShip"")]
[assembly: AssemblyConfigurationAttribute(""release"")]
[assembly: AssemblyInformationalVersionAttribute(""$version"")]"  | out-file $filename -encoding "ASCII"    
}

function script:poke-xml($filePath, $xpath, $value, $namespaces = @{}) {
    [xml] $fileXml = Get-Content $filePath
    
    if($namespaces -ne $null -and $namespaces.Count -gt 0) {
        $ns = New-Object Xml.XmlNamespaceManager $fileXml.NameTable
        $namespaces.GetEnumerator() | %{ $ns.AddNamespace($_.Key,$_.Value) }
        $node = $fileXml.SelectSingleNode($xpath,$ns)
    } else {
        $node = $fileXml.SelectSingleNode($xpath)
    }
    
    Assert ($node -ne $null) "could not find node @ $xpath"
        
    if($node.NodeType -eq "Element") {
        $node.InnerText = $value
    } else {
        $node.Value = $value
    }

    $fileXml.Save($filePath) 
} 